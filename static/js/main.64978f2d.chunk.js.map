{"version":3,"sources":["Components/Game/Game.module.css","Components/MainMenu/MainMenu.module.css","Components/Notification/Notification.module.css","Utilities/db.js","Components/MainMenu/MainMenu.js","Components/Notification/Notification.js","Components/UsePrevious/UsePrevious.js","Components/Game/Game.js","Components/PostGame/PostGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","config","apiKey","process","APIKEY","authDomain","AUTHDOMAIN","databaseURL","DATABASEURL","storageBucket","PROJECTID","projectId","STORAGEBUCKET","firebase","initializeApp","fbRealtimeDB","database","fbFirestore","firestore","dbFunctions","createGame","gameID","host","ref","set","hostID","id","createdOn","Date","currentTurn","player","name","players","joinGame","once","snapshot","currentUsers","val","push","startGame","gameSnapshot","startedAt","turnsLeft","turnTimeLimit","pickPhaseTimeLimit","startTime","setCards","playerID","playersHand","playerIndex","findIndex","user","cards","getMetaUpdates","cb","on","getQuestionCards","Promise","resolve","reject","collection","get","then","questionCards","forEach","doc","data","catch","error","getAnswerCards","answerCards","setCurrentTurnQuestion","question","currentTurnData","answerQuestion","answer","currentTurnAnswers","setCurrentTurnPickPhase","pickPhaseStarted","pickTurnWinner","currentTurnPlayerID","activeGameData","winnerIndex","currentPlayerIndex","nextPlayerIndex","length","points","mounted","withRouter","props","useState","stage","setStage","className","styles","MainMenuButtons","onClick","stageData","setStageData","title","setTitle","setGameID","gameMetaData","setGameMetaData","myID","setMyID","createNameEl","useRef","joinNameEl","gameIDEl","useEffect","gameLobbyUpdate","gameMD","toString","uuid","db","current","value","sessionStorage","setItem","style","fontSize","marginTop","listStyleType","padding","map","key","history","MainMenuTitle","Notification","text","show","notification","setNotification","setTimeout","activeNotification","usePrevious","dataLoaded","setDataLoaded","setQuestionCards","setAnswerCards","countdown","setCountdown","playerCards","setPlayerCards","myTurn","setMyTurn","canPickCard","setCanPickCard","answers","setAnswers","previousGameMetaData","countdownInterval","undefined","promises","result","all","getGameID","gameDataChange","getItem","console","log","clearInterval","secondsDiff","parseInt","gameData","firstNoCardPlayerIndex","playerData","sort","Math","random","slice","startCountdown","checkIfMyTurn","checkIfCanPickCard","setInterval","prevState","questionIndex","floor","pathNameSplit","location","pathname","split","index","pCards","currentAnswer","selected","availableCards","filter","card","pCard","splice","a","pickWinner","aCards","currentPick","playerCard","selectedCard","selectedCardNo","cancelPick","selectedCardText","selectedCardYes","playerCardText","cardsHandPlaceholder","cancelSelect","turnCounter","fontWeight","activeCard","activeCardText","handHeader","cardsHand","PostGame","leaderboardList","setLeaderboardList","sortedByPoints","b","marginBottom","App","path","component","Game","MainMenu","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.64978f2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"turnCounter\":\"Game_turnCounter__1z1b9\",\"activeCard\":\"Game_activeCard__1xphX\",\"activeCardText\":\"Game_activeCardText__1ORCN\",\"cardsHand\":\"Game_cardsHand__2QuH5\",\"handHeader\":\"Game_handHeader__341pw\",\"playerCard\":\"Game_playerCard__Xq-U8\",\"playerCardText\":\"Game_playerCardText__1dadI\",\"selectedCard\":\"Game_selectedCard__H2E_X\",\"cardsHandPlaceholder\":\"Game_cardsHandPlaceholder__1HsyQ\",\"selectedCardNo\":\"Game_selectedCardNo__wBE0O\",\"selectedCardYes\":\"Game_selectedCardYes__3uqGl\",\"selectedCardText\":\"Game_selectedCardText__3xZgK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainMenuTitle\":\"MainMenu_MainMenuTitle__2HJxy\",\"MainMenuButtons\":\"MainMenu_MainMenuButtons__2T6AA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__Tgmlt\",\"activeNotification\":\"Notification_activeNotification__2J3xf\"};","import firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/firestore';\n\nvar config = {\n\tapiKey: process.env.APIKEY,\n\tauthDomain: process.env.AUTHDOMAIN,\n\tdatabaseURL: process.env.DATABASEURL,\n    storageBucket: process.env.PROJECTID,\n    projectId: process.env.STORAGEBUCKET\n};\n\nfirebase.initializeApp(config);\n\nlet fbRealtimeDB = firebase.database();\nlet fbFirestore = firebase.firestore();\n\nlet dbFunctions = () => {\n    return {\n        createGame: (gameID, host) => {\n            fbRealtimeDB.ref('activeGames/' + gameID).set({\n                gameID,\n                hostID: host.id,\n                createdOn: +new Date(),\n                currentTurn: {\n                    player: {\n                        id: host.id,\n                        name: host.name\n                    }\n                },\n                players: [\n                    {\n                        id: host.id,\n                        name: host.name\n                    }\n                ]\n            });\n        },\n        joinGame: (gameID, player) => {\n            // TODO: Don't let new player join if the game as started (ie there is a startedAt time)\n            fbRealtimeDB.ref('activeGames/' + gameID + '/players').once('value', (snapshot) => {\n                // TODO: Figure out a way to implement concurrency. Maybe last updated timestamp\n                let currentUsers = snapshot.val();\n                currentUsers.push(player);\n\n                fbRealtimeDB.ref('activeGames/' + gameID + '/players').set(\n                    currentUsers\n                );\n            });\n        },\n        startGame: (gameID) => {\n            // TODO: Pass in number of turns. This can be configured in pre game lobby by host (and maybe other settings)\n            fbRealtimeDB.ref('activeGames/' + gameID).once('value', (snapshot) => {\n                let gameSnapshot = snapshot.val();\n                gameSnapshot.startedAt = +new Date();\n                gameSnapshot.turnsLeft = 20;\n                gameSnapshot.turnTimeLimit = 60;\n                gameSnapshot.pickPhaseTimeLimit = 15;\n                gameSnapshot.currentTurn.startTime = +new Date();\n\n                fbRealtimeDB.ref('activeGames/' + gameID).set(\n                    gameSnapshot\n                );\n            });\n        },\n        setCards: (gameID, playerID, playersHand) => {\n            fbRealtimeDB.ref('activeGames/' + gameID + '/players').once('value', (snapshot) => {\n                let currentUsers = snapshot.val();\n                let playerIndex = currentUsers.findIndex(user => {\n                    return user.id === playerID;\n                });\n                currentUsers[playerIndex].cards = playersHand;\n\n                fbRealtimeDB.ref('activeGames/' + gameID + '/players').set(\n                    currentUsers\n                );\n            });\n        },\n        getMetaUpdates: (gameID, cb) => {\n            fbRealtimeDB.ref('activeGames/' + gameID).on('value', (snapshot) => {\n                cb(snapshot.val());\n            });\n        },\n        getQuestionCards: () => {\n            return new Promise((resolve, reject) => {\n                fbFirestore.collection(\"questionCards\").get().then(snapshot => {\n                    let questionCards = [];\n            \n                    snapshot.forEach(doc => {\n                        questionCards.push(doc.data());\n                    });\n    \n                    resolve(questionCards);\n                }).catch(error => {\n                    reject(error);\n                });\n            });\n        },\n        getAnswerCards: () => {\n            return new Promise((resolve, reject) => {\n                fbFirestore.collection(\"answerCards\").get().then(snapshot => {\n                    let answerCards = [];\n            \n                    snapshot.forEach(doc => {\n                        answerCards.push(doc.data());\n                    });\n    \n                    resolve(answerCards);\n                }).catch(error => {\n                    reject(error);\n                });\n            });\n        },\n        setCurrentTurnQuestion: (gameID, question) => {\n            fbRealtimeDB.ref('activeGames/' + gameID + '/currentTurn').once('value', (snapshot) => {\n                let currentTurnData = snapshot.val();\n\n                if(!currentTurnData.question) {\n                    currentTurnData.question = question;\n\n                    fbRealtimeDB.ref('activeGames/' + gameID + '/currentTurn').set(\n                        currentTurnData\n                    );\n                }\n            });\n        },\n        answerQuestion: (gameID, playerID, answer) => {\n            return new Promise((resolve, reject) => {\n                fbRealtimeDB.ref('activeGames/' + gameID + '/currentTurn/answers').once('value', (snapshot) => {\n                    let currentTurnAnswers = snapshot.val();\n    \n                    if (!currentTurnAnswers) {\n                        currentTurnAnswers = [{playerID, data: answer}];\n                    } else {\n                        currentTurnAnswers.push({playerID, data: answer});\n                    }\n    \n                    // TODO: Prevent the user from answering twice\n                    fbRealtimeDB.ref('activeGames/' + gameID + '/currentTurn/answers').set(\n                        currentTurnAnswers\n                    ).then(() => {\n                        resolve();\n                    }).catch(error => {\n                        reject(error);\n                    });\n                });\n            });\n        },\n        setCurrentTurnPickPhase: (gameID) => {\n            fbRealtimeDB.ref('activeGames/' + gameID + '/currentTurn').once('value', (snapshot) => {\n                let currentTurnData = snapshot.val();\n                currentTurnData.pickPhaseStarted = +new Date();\n\n                fbRealtimeDB.ref('activeGames/' + gameID + '/currentTurn').set(\n                    currentTurnData\n                );\n            });\n        },\n        pickTurnWinner: (gameID, currentTurnPlayerID, playerID) => {\n            fbRealtimeDB.ref('activeGames/' + gameID).once('value', (snapshot) => {\n                let activeGameData = snapshot.val();\n                let winnerIndex = activeGameData.players.findIndex(player => player.id === playerID);\n                let currentPlayerIndex = activeGameData.players.findIndex(player => player.id === currentTurnPlayerID);\n                let nextPlayerIndex = currentPlayerIndex === activeGameData.players.length - 1 ? 0 : currentPlayerIndex + 1;\n                \n                // Increment points of the winner\n                activeGameData.players[winnerIndex].points = activeGameData.players[winnerIndex].points ? activeGameData.players[winnerIndex].points + 1 : 1;\n                \n                activeGameData.turnsLeft = activeGameData.turnsLeft - 1;\n                \n                if (activeGameData.turnsLeft === 0) {\n                    delete activeGameData.currentTurn;\n                } else {\n                    // Reset current turn metadata\n                    activeGameData.currentTurn = {\n                        player: {\n                            id: activeGameData.players[nextPlayerIndex].id,\n                            name: activeGameData.players[nextPlayerIndex].name,\n                        },\n                        startTime: +new Date()\n                    };\n                }\n\n                fbRealtimeDB.ref('activeGames/' + gameID).set(\n                    activeGameData\n                );\n            });\n        }\n    }\n};\n\nexport default dbFunctions;","import React, {useState, useEffect, useRef} from 'react';\nimport styles from './MainMenu.module.css';\nimport db from '../../Utilities/db';\nimport { v4 as uuid } from 'uuid';\nimport { withRouter } from 'react-router-dom';\n\nlet mounted = true;\n\nfunction MainMenu(props) {\n    const [stage, setStage] = useState();\n    const [stageData, setStageData] = useState(\n        <div className={styles.MainMenuButtons}>\n            <button onClick={() => setStage('create')}>Create Game</button>\n            <button onClick={() => setStage('join')}>Join Game</button>\n        </div>\n    );\n    const [title, setTitle] = useState('Main Menu');\n    const [gameID, setGameID] = useState();\n    const [gameMetaData, setGameMetaData] = useState();\n    const [myID, setMyID] = useState();\n\n    const createNameEl = useRef(null);\n    const joinNameEl = useRef(null);\n    const gameIDEl = useRef(null);\n\n    useEffect(() => {\n        return () => {\n            mounted = false;\n        };\n    }, []);\n\n    useEffect(() => {\n        let createGame = () => {\n            // Converts the date to an int and converts it to base 36, to make it as short as possible\n            let gameID = (+new Date()).toString(36);\n            let playerID = uuid();\n    \n            db().createGame(gameID, { name: createNameEl.current.value, id: playerID });\n            db().getMetaUpdates(gameID, gameLobbyUpdate);\n    \n            setGameID(gameID);\n            setStage('lobby');\n            setMyID(playerID);\n            sessionStorage.setItem('playerID', playerID);\n        };\n    \n        let joinGame = () => {\n            let playerID = uuid();\n    \n            db().joinGame(gameIDEl.current.value, { name: joinNameEl.current.value, id: playerID })\n            db().getMetaUpdates(gameIDEl.current.value, gameLobbyUpdate);\n            \n            setGameID(gameIDEl.current.value);\n            setStage('lobby');\n            setMyID(playerID);\n            sessionStorage.setItem('playerID', playerID);\n        };\n    \n        let gameLobbyUpdate = (gameMD) => {\n            if(mounted) {\n                setGameMetaData(gameMD);\n            }\n        };\n\n        let startGame = () => {\n            db().startGame(gameID);\n            props.history.push('/game/' + gameID);\n        };\n\n        switch(stage) {\n            case 'create':\n                setTitle('Create Game');\n                setStageData(\n                    <div>\n                        Your Name\n                        <input ref={createNameEl} />\n                        <button onClick={createGame}>Create Game</button>\n                    </div>\n                );\n                break;\n            case 'join':\n                setTitle('Join Game');\n                setStageData(\n                    <div>\n                        Game ID\n                        <br/>\n                        <input ref={gameIDEl} />\n                        Your Name\n                        <br/>\n                        <input ref={joinNameEl} />\n                        <button onClick={joinGame}>Join Game</button>\n                    </div>\n                );\n                break;\n            case 'lobby':\n                setTitle('Lobby');\n                setStageData(\n                    <div>\n                        {\n                            gameID ? (\n                                <div>\n                                    Game ID\n                                    <div style={{fontSize: \"50px\", marginTop: \"10px\"}}>{gameID}</div>\n                                </div>\n                            ) : null\n                        }\n                        <div className=\"blurredBackground\">\n                            <h3>Players ({(gameMetaData && gameMetaData.players.length) || '-'})</h3>\n                            {\n                                gameMetaData ? (\n                                    <ul style={{listStyleType: \"none\", padding: \"0px\"}}>\n                                        {gameMetaData.players.map(player => (\n                                            <li style={{marginTop: \"15px\"}} key={player.id}>\n                                                {player.name}\n                                                {\n                                                    player.id === myID ? <span> (You)</span> : \n                                                    (player.id === gameMetaData.hostID ? <span> (Host)</span> : null)\n                                                }\n                                            </li>\n                                        ))}\n                                    </ul>\n                                ) : <div>Loading...</div>\n                            }\n                        </div>\n                        {\n                            gameMetaData && (myID === gameMetaData.hostID) ? \n                            <button onClick={startGame}>Start Game</button> : \n                            <div>Waiting for host to start game</div>\n                        }\n                    </div>\n                );\n                break;\n            default:\n                break;\n        }\n\n        return () => {\n            // If a player is in the lobby and the game has started, route to the game page\n            if(stage === 'lobby' && gameMetaData && gameMetaData.startedAt) {\n                props.history.push('/game/' + gameID);\n            }\n        };\n    }, [stage, gameID, gameMetaData, myID, props.history]);\n\n    return (\n        <div>\n            <h1 className={styles.MainMenuTitle}>\n                {title}\n            </h1>\n            {stageData}\n        </div>\n    );\n}\n\nexport default withRouter(MainMenu);","import React, { useState, useEffect } from 'react';\nimport styles from './Notification.module.css';\n\nfunction Notification(props) {\n    const [notification, setNotification] = useState({text: '', show: false});\n\n    useEffect(() => {\n        if(props.text) {\n            setNotification({text: props.text, show: true});\n        }\n    }, [props]);\n\n    useEffect(() => {\n        if(notification.show) {\n            setTimeout(() => {\n                setNotification({text: notification.text, show: false});\n            }, 2000);\n        }\n    }, [notification]);\n\n    return (\n        <div className={styles.notification + (notification.show ? ' ' + styles.activeNotification : '')}>\n            {notification.text}\n        </div>\n    );\n}\n\nexport default Notification;","import {useRef, useEffect} from 'react';\n\nfunction usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n}\n\nexport default usePrevious;","import React, { useState, useEffect } from 'react';\nimport db from '../../Utilities/db';\nimport styles from './Game.module.css';\nimport { withRouter } from 'react-router-dom';\nimport Notification from '../Notification/Notification';\nimport usePrevious from '../UsePrevious/UsePrevious';\n\nfunction Game(props) {\n    const [dataLoaded, setDataLoaded] = useState(false);\n    const [questionCards, setQuestionCards] = useState();\n    const [answerCards, setAnswerCards] = useState();\n    const [countdown, setCountdown] = useState();\n    const [playerCards, setPlayerCards] = useState();\n    const [gameMetaData, setGameMetaData] = useState();\n    const [myTurn, setMyTurn] = useState(false);\n    const [canPickCard, setCanPickCard] = useState(true);\n    const [notification, setNotification] = useState({text: ''});\n    const [answers, setAnswers] = useState();\n    const previousGameMetaData = usePrevious(gameMetaData);\n\n    let countdownInterval = undefined;\n\n    useEffect(() => {\n        // TODO: Check local storage for game id and connect them to it if game is active\n        let promises = [];\n\n        promises.push(new Promise((resolve, reject) => {\n            db().getQuestionCards().then(result => {\n                setQuestionCards(result);\n                resolve();\n            });\n        }));\n        \n        promises.push(new Promise((resolve, reject) => {\n            db().getAnswerCards().then(result => {\n                setAnswerCards(result);\n                resolve();\n            });\n        }));\n        \n        Promise.all(promises).then(() => {\n            setDataLoaded(true);\n            db().getMetaUpdates(getGameID(), gameDataChange);\n        });\n        // eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        if(dataLoaded) {\n            db().getMetaUpdates(getGameID(), gameDataChange);\n        }\n        // eslint-disable-next-line\n    }, [dataLoaded]);\n\n    useEffect(() => {\n        if ((countdown <= 0) && (gameMetaData.currentTurn.player.id === sessionStorage.getItem('playerID'))) {\n            if (!(gameMetaData.currentTurn.pickPhaseStarted)) {\n                db().setCurrentTurnPickPhase(gameMetaData.gameID);\n            } else {\n                // TODO: End turn\n                // Turn ends on winner select, so maybe this is not needed\n                console.log('end turn');\n            }\n        }\n        // eslint-disable-next-line\n    }, [countdown]);\n\n    useEffect(() => {\n        if(notification.text) {\n            setNotification({text: ''});\n        }\n    }, [notification]);\n\n    useEffect(() => {\n        // Reset the game if it's a new players turn\n        if(previousGameMetaData && (previousGameMetaData.currentTurn.player.id !== gameMetaData.currentTurn.player.id)) {\n            setCountdown(gameMetaData.turnTimeLimit);\n            setPlayerCards();\n            setMyTurn(false);\n            setCanPickCard(true);\n            setAnswers();\n            clearInterval(countdownInterval);\n        }\n\n        if(gameMetaData && gameMetaData.currentTurn.pickPhaseStarted) {\n            let secondsDiff = parseInt((gameMetaData.currentTurn.pickPhaseStarted / 1000 + gameMetaData.pickPhaseTimeLimit) - +new Date()/1000);\n            setCountdown(secondsDiff <= 0 ? 0 : secondsDiff);\n        }\n        // eslint-disable-next-line\n    }, [gameMetaData]);\n\n    let gameDataChange = (gameData) => {\n        // Game is over, navigate to post game\n        if(!gameData.currentTurn) {\n            props.history.push('/postgame/' + gameData.gameID);\n            clearInterval(countdownInterval);\n            return;\n        }\n\n        let firstNoCardPlayerIndex = gameData.players.findIndex(playerData => playerData.cards === undefined);\n        let playerID = sessionStorage.getItem('playerID');\n        let currentPlayerIndex = gameData.players.findIndex(playerData => playerData.id === playerID);\n        \n        // If someone still needs to draw cards, and that someone is me, then draw the cards and set them\n        if ((firstNoCardPlayerIndex !== -1) && (gameData.players[firstNoCardPlayerIndex].id === playerID)) {\n            // Gets 5 random cards from the answerCards array\n            let playersHand = [...answerCards].sort(() => Math.random() - Math.random()).slice(0, 5);\n            db().setCards(getGameID(), playerID, playersHand);\n        }\n\n        if (gameData.players[currentPlayerIndex].cards) {\n            setPlayerCards(gameData.players[currentPlayerIndex].cards);\n        }\n\n        setGameMetaData(gameData);\n        setAnswers(gameData.currentTurn.answers);\n\n        if(!countdownInterval) {\n            startCountdown(gameData);\n        }\n        \n        checkIfMyTurn(gameData);\n        checkIfCanPickCard(gameData);\n    };\n\n    let startCountdown = (gameData) => {\n        // If the current round is in the pick phase, set the countdown relative to that\n        // otherwise set it relative to the start of turn timestamp\n        let secondsDiff = gameData.currentTurn.pickPhaseStarted ? \n            parseInt((gameData.currentTurn.pickPhaseStarted / 1000 + gameData.pickPhaseTimeLimit) - +new Date()/1000) :\n            parseInt((gameData.currentTurn.startTime / 1000 + gameData.turnTimeLimit) - +new Date()/1000);\n\n        setCountdown(secondsDiff <= 0 ? 0 : secondsDiff);\n\n        countdownInterval = setInterval(() => {\n            setCountdown(prevState => prevState <= 0 ? 0 : prevState - 1);\n        }, 1000);\n    };\n\n    let checkIfMyTurn = (gameData) => {\n        if(!questionCards) {\n            return;\n        }\n        let currentTurnPlayerID = gameData.currentTurn.player.id;\n        let myID = sessionStorage.getItem('playerID');\n\n        if (currentTurnPlayerID === myID) {\n            setMyTurn(true);\n            let questionIndex = Math.floor(Math.random() * (questionCards.length));\n            db().setCurrentTurnQuestion(gameData.gameID, questionCards[questionIndex].data);\n        }\n    };\n\n    let checkIfCanPickCard = (gameData) => {\n        if(gameData.currentTurn.pickPhaseStarted) {\n            setCanPickCard(false);\n        } else {\n            if(!gameData.currentTurn.answers) {\n                setCanPickCard(true);\n            } else {\n                setCanPickCard(gameData.currentTurn.answers.findIndex(answer => answer.playerID === sessionStorage.getItem('playerID')) === -1);\n            }\n        }\n    };\n\n    let getGameID = () => {\n        let pathNameSplit = props.location.pathname.split('/');\n        let gameID = pathNameSplit[pathNameSplit.length - 1];\n        return gameID;\n    }\n\n    let answerQuestion = (index) => {\n        if(canPickCard) {\n            let pCards = [...playerCards];\n            let currentAnswer = pCards[index];\n            \n            if(currentAnswer.selected) {\n                db().answerQuestion(gameMetaData.gameID, sessionStorage.getItem('playerID'), currentAnswer.data).then(() => {\n                    delete pCards[index].selected;\n                    \n                    // Gets all available cards that are not in the hand\n                    let availableCards = answerCards.filter(card => pCards.findIndex(pCard => pCard.data === card.data) === -1);\n                    \n                    pCards.splice(index, 1);\n                    pCards.push(availableCards[Math.floor(Math.random() * (availableCards.length))]);\n    \n                    db().setCards(gameMetaData.gameID, sessionStorage.getItem('playerID'), pCards);\n    \n                    setPlayerCards(pCards);                \n                });\n            } else {\n                pCards.map(a => delete a.selected);\n                currentAnswer.selected = true;\n                setPlayerCards(pCards);\n            }\n        } else {\n            if (gameMetaData.currentTurn.pickPhaseStarted) {\n                setNotification({text: 'Can\\'t answer during pick phase!'});\n            } else {\n                setNotification({text: 'Already picked a card this turn!'});\n            }\n        }\n    };\n\n    let pickWinner = (index) => {\n        if (gameMetaData.currentTurn.pickPhaseStarted) {\n            let aCards = [...answers];\n            let currentPick = aCards[index];\n            \n            if(currentPick.selected) {\n                db().pickTurnWinner(gameMetaData.gameID, sessionStorage.getItem('playerID'), currentPick.playerID);\n            } else {\n                aCards.map(a => delete a.selected);\n                currentPick.selected = true;\n                setAnswers(aCards);\n            }\n        } else {\n            setNotification({text: 'Can\\'t pick a winner until pick phase!'});\n        }\n    };\n\n    let cancelSelect = (index) => {\n        let pCards = [...playerCards];\n        delete pCards[index].selected;\n        setPlayerCards(pCards);\n    };\n\n    let cancelPick = (index) => {\n        let aCards = [...answers];\n        delete aCards[index].selected;\n        setAnswers(aCards);\n    };\n\n    let aCards = (\n        gameMetaData && answers && answers.length ? \n        answers.map((answer, index) => (\n            <div key={index} className={styles.playerCard}>\n                {\n                    answer.selected ? \n                    <div className={styles.selectedCard}>\n                        <div className={styles.selectedCardNo} onClick={() => {cancelPick(index)}}>\n                            <span className={styles.selectedCardText}>\n                                Cancel\n                            </span>\n                        </div>\n                        <div className={styles.selectedCardYes} onClick={() => {pickWinner(index)}}>\n                            <span className={styles.selectedCardText}>\n                                Select\n                            </span>\n                        </div>\n                    </div> :\n                    <div className={styles.playerCardText} onClick={() => {pickWinner(index)}}>\n                        <span className={styles.selectedCardText}>\n                            {answer.data}\n                        </span>\n                    </div>\n                }\n            </div>\n        )) : \n        <div className={styles.cardsHandPlaceholder}>Players are picking answers...</div>\n    );\n\n    let pCards = (\n        playerCards ?\n        playerCards.map((card, index) => (\n            <div key={index} className={styles.playerCard}>\n                {\n                    card.selected ?\n                    <div className={styles.selectedCard}>\n                        <div className={styles.selectedCardNo} onClick={() => {cancelSelect(index)}}>\n                            <span className={styles.selectedCardText}>\n                                Cancel\n                            </span>\n                        </div>\n                        <div className={styles.selectedCardYes} onClick={() => {answerQuestion(index)}}>\n                            <span className={styles.selectedCardText}>\n                                Select\n                            </span>\n                        </div>\n                    </div> :\n                    <div className={styles.playerCardText} onClick={() => {answerQuestion(index)}}>\n                        <span className={styles.selectedCardText}>\n                            {card.data}\n                        </span>\n                    </div>\n                }\n            </div>\n        )) : <div className={styles.cardsHandPlaceholder}>Loading your cards...</div>\n    );\n\n    return (\n        <div>\n            <Notification text={notification.text}/>\n            <h1>Game</h1>\n            {dataLoaded ? (\n                <div>\n                    <div className={styles.turnCounter}>\n                        <span style={{fontWeight:300}}>Turns Left:</span> <span style={{fontWeight:900}}>{gameMetaData ? gameMetaData.turnsLeft : '-'}</span>\n                    </div>\n                    <div>\n                        {myTurn ? 'Your' : ((gameMetaData ? gameMetaData.currentTurn.player.name : '-') + \"'s\")} turn\n                        <div style={{marginTop: \"25px\", fontSize: \"2em\"}} className={countdown <= 5 ? 'redText' : null}>\n                            {countdown}\n                        </div>\n                        <div style={{marginTop: \"20px\"}}>\n                            {gameMetaData && gameMetaData.currentTurn.pickPhaseStarted ? 'Pick phase' : 'Answer phase'}\n                        </div>\n                    </div>\n                    <div className={styles.activeCard}>\n                        <div className={styles.activeCardText}>\n                            {gameMetaData && gameMetaData.currentTurn.question ? gameMetaData.currentTurn.question : 'Picking question...'}\n                        </div>\n                    </div>\n                    <div className={styles.handHeader}>\n                        {myTurn ? 'Player Answers' : 'Your Cards'}\n                    </div>\n                    <div className={styles.cardsHand}>\n                        {\n                            myTurn ? aCards : pCards\n                        }\n                    </div>\n                </div>\n            ) : (\n                <div>Loading...</div>\n            )}\n        </div>\n    );\n}\n\nexport default withRouter(Game);","import React, {useState, useEffect} from 'react';\nimport db from '../../Utilities/db';\n\nfunction PostGame(props) {\n    const [leaderboardList, setLeaderboardList] = useState();\n\n    useEffect(() => {\n        let getGameID = () => {\n            let pathNameSplit = props.location.pathname.split('/');\n            let gameID = pathNameSplit[pathNameSplit.length - 1];\n            return gameID;\n        }\n        \n        db().getMetaUpdates(getGameID(), gameDataChange);\n    }, [props.location.pathname]);\n\n    let gameDataChange = (gameData) => {\n        let sortedByPoints = gameData.players.sort((a,b) => (b.points === undefined) ? -1 : (b.points - a.points));\n\n        setLeaderboardList(sortedByPoints);\n    };\n\n    return (\n        <div>\n            <h1>Post Game Lobby</h1>\n            <div>\n                Winner: <span style={{fontWeight: 700}}>{leaderboardList ? leaderboardList[0].name : '-'}</span>\n            </div>\n            <div className=\"blurredBackground\">\n                <h3>Leaderboard</h3>\n                {\n                    leaderboardList ?\n                    (\n                        <ul style={{listStyleType: \"none\", padding: \"0px\"}}>\n                            {leaderboardList.map((player, index) => (\n                                <li style={{marginTop: \"15px\"}} key={player.id}>\n                                    {index + 1}. {player.name} ( {player.points ? player.points : 0} point{player.points === 1 ? '' : 's'} )\n                                </li>\n                            ))}\n                        </ul>\n                    ) :\n                    <div style={{marginBottom: \"30px\"}}>Loading Player List...</div>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default PostGame;","import React from 'react';\nimport './App.css';\nimport MainMenu from './Components/MainMenu/MainMenu';\nimport Game from './Components/Game/Game';\nimport PostGame from './Components/PostGame/PostGame';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\n// TODO: Remove the app component and include the main menu inside index.js\nfunction App() {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<div className=\"App\">\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/postgame\" component={PostGame} />\n\t\t\t\t\t<Route path=\"/game\" component={Game} />\n\t\t\t\t\t<Route path=\"/\" component={MainMenu} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</BrowserRouter>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}